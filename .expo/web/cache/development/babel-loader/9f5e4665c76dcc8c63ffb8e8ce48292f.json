{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Bootcamp\\\\react native\\\\finalProject\\\\node_modules\\\\react-native-gesture-handler\\\\dist\\\\src\\\\components\\\\DrawerLayout.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\n\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n\n  var _super = _createSuper(DrawerLayout);\n\n  function DrawerLayout(props) {\n    var _this;\n\n    _classCallCheck(this, DrawerLayout);\n\n    _this = _super.call(this, props);\n    _this.accessibilityIsModalView = React.createRef();\n    _this.pointerEventsView = React.createRef();\n    _this.panGestureHandler = React.createRef();\n    _this.drawerShown = false;\n\n    _this.updateAnimatedEvent = function (props, state) {\n      var drawerPosition = props.drawerPosition,\n          drawerWidth = props.drawerWidth,\n          drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n          touchXValue = state.touchX,\n          drawerTranslation = state.drawerTranslation,\n          containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          _this.props.onDrawerSlide == null ? void 0 : _this.props.onDrawerSlide(position);\n        };\n      }\n\n      _this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n\n    _this.handleContainerLayout = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n\n    _this.emitStateChanged = function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged == null ? void 0 : _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n\n    _this.openingHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n\n    _this.onTapHandlerStateChange = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      if (_this.drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    };\n\n    _this.handleRelease = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props = _this.props,\n          drawerWidth = _this$props.drawerWidth,\n          drawerPosition = _this$props.drawerPosition,\n          drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n          velocityX = nativeEvent.velocityX,\n          touchX = nativeEvent.x;\n\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n\n    _this.updateShowing = function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) == null ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) == null ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n          drawerPosition = _this$props2.drawerPosition,\n          minSwipeDistance = _this$props2.minSwipeDistance,\n          edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) == null ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n\n    _this.animateDrawer = function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n\n      var willShow = toValue !== 0;\n\n      _this.updateShowing(willShow);\n\n      _this.emitStateChanged(SETTLING, willShow);\n\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed != null ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n\n          if (willShow) {\n            _this.props.onDrawerOpen == null ? void 0 : _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose == null ? void 0 : _this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n\n    _this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    _this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n      _this.forceUpdate();\n    };\n\n    _this.renderOverlay = function () {\n      invariant(_this.openValue, 'should be set');\n\n      var overlayOpacity = _this.openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 21\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderDrawer = function () {\n      var _this$props3 = _this.props,\n          drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n          drawerWidth = _this$props3.drawerWidth,\n          drawerPosition = _this$props3.drawerPosition,\n          drawerType = _this$props3.drawerType,\n          drawerContainerStyle = _this$props3.drawerContainerStyle,\n          contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n\n      var drawerTranslateX = 0;\n\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles,\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }\n      }, _this.props.renderNavigationView(_this.openValue))));\n    };\n\n    _this.setPanGestureRef = function (ref) {\n      _this.panGestureHandler.current = ref;\n      _this.props.onGestureRef == null ? void 0 : _this.props.onGestureRef(ref);\n    };\n\n    var dragX = new Animated.Value(0);\n    var touchX = new Animated.Value(0);\n    var drawerTranslation = new Animated.Value(0);\n    _this.state = {\n      dragX: dragX,\n      touchX: touchX,\n      drawerTranslation: drawerTranslation,\n      containerWidth: 0\n    };\n\n    _this.updateAnimatedEvent(props, _this.state);\n\n    return _this;\n  }\n\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          drawerPosition = _this$props4.drawerPosition,\n          drawerLockMode = _this$props4.drawerLockMode,\n          edgeWidth = _this$props4.edgeWidth,\n          minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 17\n        }\n      }, this.renderDrawer());\n    }\n  }]);\n\n  return DrawerLayout;\n}(Component);\n\nexport { DrawerLayout as default };\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"sources":["D:/Bootcamp/react native/finalProject/node_modules/react-native-gesture-handler/dist/src/components/DrawerLayout.js"],"names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","props","accessibilityIsModalView","createRef","pointerEventsView","panGestureHandler","drawerShown","updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","handleContainerLayout","setState","layout","width","emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","openingHandlerStateChange","oldState","ACTIVE","handleRelease","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","onTapHandlerStateChange","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","openDrawer","options","forceUpdate","renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","styles","overlay","renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","containerOnBack","containerInFront","children","drawerContainer","renderNavigationView","setPanGestureRef","ref","onGestureRef","enableTrackpadTwoFingerGesture","defaultProps","positions","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"mappings":";;;;;;;;;;;;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,SAAP,MAAsB,WAAtB;;;;;;;AAEA,SAASC,iBAAT,EAA4BC,iBAA5B;AACA,SAASC,KAAT;AACA,IAAMC,SAAS,GAAG,IAAlB;AACA,IAAMC,IAAI,GAAG,MAAb;AACA,IAAMC,QAAQ,GAAG,UAAjB;AACA,IAAMC,QAAQ,GAAG,UAAjB;;IACqBC,Y;;;;;AACjB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,wBAAL,GAAgCZ,KAAK,CAACa,SAAN,EAAhC;AACA,UAAKC,iBAAL,GAAyBd,KAAK,CAACa,SAAN,EAAzB;AACA,UAAKE,iBAAL,GAAyBf,KAAK,CAACa,SAAN,EAAzB;AACA,UAAKG,WAAL,GAAmB,KAAnB;;AACA,UAAKC,mBAAL,GAA2B,UAACN,KAAD,EAAQO,KAAR,EAAkB;AAAA,UAEjCC,cAFiC,GAEWR,KAFX,CAEjCQ,cAFiC;AAAA,UAEjBC,WAFiB,GAEWT,KAFX,CAEjBS,WAFiB;AAAA,UAEJC,UAFI,GAEWV,KAFX,CAEJU,UAFI;AAAA,UAG1BC,UAH0B,GAG8CJ,KAH9C,CAGjCK,KAHiC;AAAA,UAGNC,WAHM,GAG8CN,KAH9C,CAGdO,MAHc;AAAA,UAGOC,iBAHP,GAG8CR,KAH9C,CAGOQ,iBAHP;AAAA,UAG0BC,cAH1B,GAG8CT,KAH9C,CAG0BS,cAH1B;AAIzC,UAAIJ,KAAK,GAAGD,UAAZ;AACA,UAAIG,MAAM,GAAGD,WAAb;;AACA,UAAIL,cAAc,KAAK,MAAvB,EAA+B;AAQ3BI,QAAAA,KAAK,GAAGK,QAAQ,CAACC,QAAT,CAAkB,IAAID,QAAQ,CAACE,KAAb,CAAmB,CAAC,CAApB,CAAlB,EAA0CR,UAA1C,CAAR;AACAG,QAAAA,MAAM,GAAGG,QAAQ,CAACG,GAAT,CAAa,IAAIH,QAAQ,CAACE,KAAb,CAAmBH,cAAnB,CAAb,EAAiDC,QAAQ,CAACC,QAAT,CAAkB,IAAID,QAAQ,CAACE,KAAb,CAAmB,CAAC,CAApB,CAAlB,EAA0CN,WAA1C,CAAjD,CAAT;AACAA,QAAAA,WAAW,CAACQ,QAAZ,CAAqBL,cAArB;AACH,OAXD,MAYK;AACDH,QAAAA,WAAW,CAACQ,QAAZ,CAAqB,CAArB;AACH;;AAyBD,UAAIC,YAAY,GAAGV,KAAnB;;AACA,UAAIF,UAAU,KAAK,OAAnB,EAA4B;AACxB,YAAMa,cAAc,GAAGN,QAAQ,CAACG,GAAT,CAAaN,MAAb,EAAqBG,QAAQ,CAACC,QAAT,CAAkB,IAAID,QAAQ,CAACE,KAAb,CAAmB,CAAC,CAApB,CAAlB,EAA0CP,KAA1C,CAArB,CAAvB;AACA,YAAMY,6BAA6B,GAAGD,cAAc,CAACE,WAAf,CAA2B;AAC7DC,UAAAA,UAAU,EAAE,CAACjB,WAAW,GAAG,CAAf,EAAkBA,WAAlB,EAA+BA,WAAW,GAAG,CAA7C,CADiD;AAE7DkB,UAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFgD,SAA3B,CAAtC;AAIAL,QAAAA,YAAY,GAAGL,QAAQ,CAACG,GAAT,CAAaR,KAAb,EAAoBY,6BAApB,CAAf;AACH;;AACD,YAAKI,SAAL,GAAiBX,QAAQ,CAACG,GAAT,CAAaE,YAAb,EAA2BP,iBAA3B,EAA8CU,WAA9C,CAA0D;AACvEC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAIjB,WAAJ,CAD2D;AAEvEkB,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAF0D;AAGvEE,QAAAA,WAAW,EAAE;AAH0D,OAA1D,CAAjB;AAKA,UAAMC,cAAc,GAAG;AACnBC,QAAAA,eAAe,EAAE/B,KAAK,CAACgC;AADJ,OAAvB;;AAGA,UAAI,MAAKhC,KAAL,CAAWiC,aAAf,EAA8B;AAC1BH,QAAAA,cAAc,CAACI,QAAf,GAA0B,UAACC,EAAD,EAAQ;AAC9B,cAAMb,YAAY,GAAGc,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASH,EAAE,CAACI,WAAH,CAAejB,YAAxB,CAAX,CAArB;AACA,cAAMkB,QAAQ,GAAGlB,YAAY,GAAG,MAAKf,KAAL,CAAWS,cAA3C;AACA,gBAAKhB,KAAL,CAAWiC,aAAX,0BAAKjC,KAAL,CAAWiC,aAAX,CAA2BO,QAA3B;AACH,SAJD;AAKH;;AACD,YAAKC,cAAL,GAAsBxB,QAAQ,CAACyB,KAAT,CAAe,CAAC;AAAEH,QAAAA,WAAW,EAAE;AAAEjB,UAAAA,YAAY,EAAEX,UAAhB;AAA4BgC,UAAAA,CAAC,EAAE9B;AAA/B;AAAf,OAAD,CAAf,EAAgFiB,cAAhF,CAAtB;AACH,KAtED;;AAuEA,UAAKc,qBAAL,GAA6B,gBAAqB;AAAA,UAAlBL,WAAkB,QAAlBA,WAAkB;;AAC9C,YAAKM,QAAL,CAAc;AAAE7B,QAAAA,cAAc,EAAEuB,WAAW,CAACO,MAAZ,CAAmBC;AAArC,OAAd;AACH,KAFD;;AAGA,UAAKC,gBAAL,GAAwB,UAACC,QAAD,EAAWC,cAAX,EAA8B;AAClD,YAAKlD,KAAL,CAAWmD,oBAAX,0BAAKnD,KAAL,CAAWmD,oBAAX,CAAkCF,QAAlC,EAA4CC,cAA5C;AACH,KAFD;;AAGA,UAAKE,yBAAL,GAAiC,iBAAsB;AAAA,UAAnBb,WAAmB,SAAnBA,WAAmB;;AACnD,UAAIA,WAAW,CAACc,QAAZ,KAAyB3D,KAAK,CAAC4D,MAAnC,EAA2C;AACvC,cAAKC,aAAL,CAAmB;AAAEhB,UAAAA,WAAW,EAAXA;AAAF,SAAnB;AACH,OAFD,MAGK,IAAIA,WAAW,CAAChC,KAAZ,KAAsBb,KAAK,CAAC4D,MAAhC,EAAwC;AACzC,cAAKN,gBAAL,CAAsBnD,QAAtB,EAAgC,KAAhC;;AACA,YAAI,MAAKG,KAAL,CAAWwD,mBAAX,KAAmC,SAAvC,EAAkD;AAC9CC,UAAAA,QAAQ,CAACC,OAAT;AACH;;AACD,YAAI,MAAK1D,KAAL,CAAW2D,aAAf,EAA8B;AAC1BC,UAAAA,SAAS,CAACC,SAAV,CAAoB,IAApB,EAA0B,MAAK7D,KAAL,CAAW8D,kBAAX,IAAiC,OAA3D;AACH;AACJ;AACJ,KAbD;;AAcA,UAAKC,uBAAL,GAA+B,iBAAsB;AAAA,UAAnBxB,WAAmB,SAAnBA,WAAmB;;AACjD,UAAI,MAAKlC,WAAL,IACAkC,WAAW,CAACc,QAAZ,KAAyB3D,KAAK,CAAC4D,MAD/B,IAEA,MAAKtD,KAAL,CAAWgE,cAAX,KAA8B,aAFlC,EAEiD;AAC7C,cAAKC,WAAL;AACH;AACJ,KAND;;AAOA,UAAKV,aAAL,GAAqB,iBAAsB;AAAA,UAAnBhB,WAAmB,SAAnBA,WAAmB;AAAA,wBACa,MAAKvC,KADlB;AAAA,UAC/BS,WAD+B,eAC/BA,WAD+B;AAAA,UAClBD,cADkB,eAClBA,cADkB;AAAA,UACFE,UADE,eACFA,UADE;AAAA,UAE/BM,cAF+B,GAEZ,MAAKT,KAFO,CAE/BS,cAF+B;AAAA,UAGnBJ,KAHmB,GAGa2B,WAHb,CAGjCjB,YAHiC;AAAA,UAGZ4C,SAHY,GAGa3B,WAHb,CAGZ2B,SAHY;AAAA,UAGEpD,MAHF,GAGayB,WAHb,CAGDI,CAHC;;AAIvC,UAAInC,cAAc,KAAK,MAAvB,EAA+B;AAG3BI,QAAAA,KAAK,GAAG,CAACA,KAAT;AACAE,QAAAA,MAAM,GAAGE,cAAc,GAAGF,MAA1B;AACAoD,QAAAA,SAAS,GAAG,CAACA,SAAb;AACH;;AACD,UAAMC,aAAa,GAAGrD,MAAM,GAAGF,KAA/B;AACA,UAAIwD,sBAAsB,GAAG,CAA7B;;AACA,UAAI1D,UAAU,KAAK,OAAnB,EAA4B;AACxB0D,QAAAA,sBAAsB,GAClBD,aAAa,GAAG1D,WAAhB,GAA8B0D,aAAa,GAAG1D,WAA9C,GAA4D,CADhE;AAEH;;AACD,UAAM4D,YAAY,GAAGzD,KAAK,GAAGwD,sBAAR,IAAkC,MAAK/D,WAAL,GAAmBI,WAAnB,GAAiC,CAAnE,CAArB;AACA,UAAM6D,WAAW,GAAGD,YAAY,GAAG1E,SAAS,GAAGuE,SAA/C;AACA,UAAMK,UAAU,GAAGD,WAAW,GAAG7D,WAAW,GAAG,CAA/C;;AACA,UAAI8D,UAAJ,EAAgB;AACZ,cAAKC,aAAL,CAAmBH,YAAnB,EAAiC5D,WAAjC,EAA8CyD,SAA9C;AACH,OAFD,MAGK;AACD,cAAKM,aAAL,CAAmBH,YAAnB,EAAiC,CAAjC,EAAoCH,SAApC;AACH;AACJ,KA1BD;;AA2BA,UAAKO,aAAL,GAAqB,UAACC,OAAD,EAAa;AAAA;;AAC9B,YAAKrE,WAAL,GAAmBqE,OAAnB;AACA,qCAAKzE,wBAAL,CAA8B0E,OAA9B,2CAAuCC,cAAvC,CAAsD;AAClDC,QAAAA,wBAAwB,EAAEH;AADwB,OAAtD;AAGA,qCAAKvE,iBAAL,CAAuBwE,OAAvB,2CAAgCC,cAAhC,CAA+C;AAC3CE,QAAAA,aAAa,EAAEJ,OAAO,GAAG,MAAH,GAAY;AADS,OAA/C;AAL8B,yBAQ0B,MAAK1E,KAR/B;AAAA,UAQtBQ,cARsB,gBAQtBA,cARsB;AAAA,UAQNuE,gBARM,gBAQNA,gBARM;AAAA,UAQYC,SARZ,gBAQYA,SARZ;AAS9B,UAAMC,QAAQ,GAAGzE,cAAc,KAAK,MAApC;AAIA,UAAM0E,kBAAkB,GAAG,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,MAAK5E,WAAL,GAAmB,CAAC,CAApB,GAAwB,CAA/C,CAA3B;AAIA,UAAM8E,OAAO,GAAGF,QAAQ,GAClB;AAAEG,QAAAA,IAAI,EAAE,CAAR;AAAWrC,QAAAA,KAAK,EAAE2B,OAAO,GAAGW,SAAH,GAAeL;AAAxC,OADkB,GAElB;AAAEM,QAAAA,KAAK,EAAE,CAAT;AAAYvC,QAAAA,KAAK,EAAE2B,OAAO,GAAGW,SAAH,GAAeL;AAAzC,OAFN;AAIA,qCAAK5E,iBAAL,CAAuBuE,OAAvB,2CAAgCC,cAAhC,CAA+C;AAC3CO,QAAAA,OAAO,EAAPA,OAD2C;AAE3CI,QAAAA,aAAa,EAAEL,kBAAkB,GAAGH;AAFO,OAA/C;AAIH,KAzBD;;AA0BA,UAAKP,aAAL,GAAqB,UAACgB,SAAD,EAAYC,OAAZ,EAAqBC,QAArB,EAA+BC,KAA/B,EAAyC;AAC1D,YAAKpF,KAAL,CAAWK,KAAX,CAAiBS,QAAjB,CAA0B,CAA1B;;AACA,YAAKd,KAAL,CAAWO,MAAX,CAAkBO,QAAlB,CAA2B,MAAKrB,KAAL,CAAWQ,cAAX,KAA8B,MAA9B,GAAuC,CAAvC,GAA2C,MAAKD,KAAL,CAAWS,cAAjF;;AACA,UAAIwE,SAAS,IAAI,IAAjB,EAAuB;AACnB,YAAII,iBAAiB,GAAGJ,SAAxB;;AACA,YAAI,MAAKxF,KAAL,CAAWgC,mBAAf,EAAoC;AAKhC,cAAIwD,SAAS,GAAGC,OAAZ,IAAuBC,QAAQ,GAAG,CAAtC,EAAyC;AACrCE,YAAAA,iBAAiB,GAAGxD,IAAI,CAACyD,GAAL,CAASL,SAAS,GAAGE,QAAQ,GAAG,IAAhC,EAAsCD,OAAtC,CAApB;AACH,WAFD,MAGK,IAAID,SAAS,GAAGC,OAAZ,IAAuBC,QAAQ,GAAG,CAAtC,EAAyC;AAC1CE,YAAAA,iBAAiB,GAAGxD,IAAI,CAAC0D,GAAL,CAASN,SAAS,GAAGE,QAAQ,GAAG,IAAhC,EAAsCD,OAAtC,CAApB;AACH;AACJ;;AACD,cAAKlF,KAAL,CAAWQ,iBAAX,CAA6BM,QAA7B,CAAsCuE,iBAAtC;AACH;;AACD,UAAMG,QAAQ,GAAGN,OAAO,KAAK,CAA7B;;AACA,YAAKhB,aAAL,CAAmBsB,QAAnB;;AACA,YAAK/C,gBAAL,CAAsBlD,QAAtB,EAAgCiG,QAAhC;;AACA,UAAI,MAAK/F,KAAL,CAAW2D,aAAf,EAA8B;AAC1BC,QAAAA,SAAS,CAACC,SAAV,CAAoBkC,QAApB,EAA8B,MAAK/F,KAAL,CAAW8D,kBAAX,IAAiC,OAA/D;AACH;;AACD7C,MAAAA,QAAQ,CAAC+E,MAAT,CAAgB,MAAKzF,KAAL,CAAWQ,iBAA3B,EAA8C;AAC1C2E,QAAAA,QAAQ,EAARA,QAD0C;AAE1CO,QAAAA,UAAU,EAAE,CAF8B;AAG1CR,QAAAA,OAAO,EAAPA,OAH0C;AAI1C1D,QAAAA,eAAe,EAAE,MAAK/B,KAAL,CAAWgC,mBAJc;AAK1C2D,QAAAA,KAAK,EAAEA,KAAF,WAAEA,KAAF,GAAWN;AAL0B,OAA9C,EAMGa,KANH,CAMS,iBAAkB;AAAA,YAAfC,QAAe,SAAfA,QAAe;;AACvB,YAAIA,QAAJ,EAAc;AACV,gBAAKnD,gBAAL,CAAsBpD,IAAtB,EAA4BmG,QAA5B;;AACA,cAAIA,QAAJ,EAAc;AACV,kBAAK/F,KAAL,CAAWoG,YAAX,0BAAKpG,KAAL,CAAWoG,YAAX;AACH,WAFD,MAGK;AACD,kBAAKpG,KAAL,CAAWqG,aAAX,0BAAKrG,KAAL,CAAWqG,aAAX;AACH;AACJ;AACJ,OAhBD;AAiBH,KA1CD;;AA2CA,UAAKC,UAAL,GAAkB,YAAkB;AAAA,UAAjBC,OAAiB,uEAAP,EAAO;;AAChC,YAAK/B,aAAL,CAEAa,SAFA,EAEW,MAAKrF,KAAL,CAAWS,WAFtB,EAEmC8F,OAAO,CAACb,QAAR,GAAmBa,OAAO,CAACb,QAA3B,GAAsC,CAFzE;;AAIA,YAAKc,WAAL;AACH,KAND;;AAOA,UAAKvC,WAAL,GAAmB,YAAkB;AAAA,UAAjBsC,OAAiB,uEAAP,EAAO;;AAEjC,YAAK/B,aAAL,CAAmBa,SAAnB,EAA8B,CAA9B,EAAiCkB,OAAO,CAACb,QAAR,GAAmBa,OAAO,CAACb,QAA3B,GAAsC,CAAvE;;AAEA,YAAKc,WAAL;AACH,KALD;;AAMA,UAAKC,aAAL,GAAqB,YAAM;AAEvBlH,MAAAA,SAAS,CAAC,MAAKqC,SAAN,EAAiB,eAAjB,CAAT;;AACA,UAAM8E,cAAc,GAAG,MAAK9E,SAAL,CAAeH,WAAf,CAA2B;AAC9CC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkC;AAE9CC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFiC;AAG9CE,QAAAA,WAAW,EAAE;AAHiC,OAA3B,CAAvB;;AAKA,UAAM8E,oBAAoB,GAAG;AACzBC,QAAAA,OAAO,EAAEF,cADgB;AAEzBG,QAAAA,eAAe,EAAE,MAAK7G,KAAL,CAAW8G;AAFH,OAA7B;AAIA,aAAQ,oBAAC,iBAAD;AAAmB,QAAA,oBAAoB,EAAE,MAAK/C,uBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACZ,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,aAAa,EAAE,MAAK1D,WAAL,GAAmB,MAAnB,GAA4B,MAA1D;AAAkE,QAAA,GAAG,EAAE,MAAKF,iBAA5E;AAA+F,QAAA,KAAK,EAAE,CAAC4G,MAAM,CAACC,OAAR,EAAiBL,oBAAjB,CAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADY,CAAR;AAGH,KAfD;;AAgBA,UAAKM,YAAL,GAAoB,YAAM;AAAA,yBACmG,MAAKjH,KADxG;AAAA,UACdkH,qBADc,gBACdA,qBADc;AAAA,UACSzG,WADT,gBACSA,WADT;AAAA,UACsBD,cADtB,gBACsBA,cADtB;AAAA,UACsCE,UADtC,gBACsCA,UADtC;AAAA,UACkDyG,oBADlD,gBACkDA,oBADlD;AAAA,UACwEC,qBADxE,gBACwEA,qBADxE;AAEtB,UAAMnC,QAAQ,GAAGzE,cAAc,KAAK,MAApC;AACA,UAAM6G,WAAW,GAAG3G,UAAU,KAAK,MAAnC;AACA,UAAM4G,cAAc,GAAG5G,UAAU,KAAK,OAAtC;AAKA,UAAM6G,uBAAuB,GAAGC,WAAW,CAACC,KAAZ,GAAoBxC,QAApB,GAA+B,CAACA,QAAhE;AACA,UAAMyC,mBAAmB,GAAG;AACxBb,QAAAA,eAAe,EAAEK,qBADO;AAExBnE,QAAAA,KAAK,EAAEtC;AAFiB,OAA5B;AAIA,UAAMmB,SAAS,GAAG,MAAKA,SAAvB;AACArC,MAAAA,SAAS,CAACqC,SAAD,EAAY,eAAZ,CAAT;AACA,UAAI+F,eAAJ;;AACA,UAAIL,cAAJ,EAAoB;AAChB,YAAMM,mBAAmB,GAAGhG,SAAS,CAACH,WAAV,CAAsB;AAC9CC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADkC;AAE9CC,UAAAA,WAAW,EAAEsD,QAAQ,GAAG,CAAC,CAAD,EAAIxE,WAAJ,CAAH,GAAsB,CAAC,CAAD,EAAI,CAACA,WAAL,CAFG;AAG9CoB,UAAAA,WAAW,EAAE;AAHiC,SAAtB,CAA5B;AAKA8F,QAAAA,eAAe,GAAG;AACdE,UAAAA,SAAS,EAAE,CAAC;AAAEC,YAAAA,UAAU,EAAEF;AAAd,WAAD;AADG,SAAlB;AAGH;;AACD,UAAIG,gBAAgB,GAAG,CAAvB;;AACA,UAAIV,WAAJ,EAAiB;AACb,YAAMW,kBAAkB,GAAG/C,QAAQ,GAAG,CAACxE,WAAJ,GAAkBA,WAArD;AACAsH,QAAAA,gBAAgB,GAAGnG,SAAS,CAACH,WAAV,CAAsB;AACrCC,UAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADyB;AAErCC,UAAAA,WAAW,EAAE,CAACqG,kBAAD,EAAqB,CAArB,CAFwB;AAGrCnG,UAAAA,WAAW,EAAE;AAHwB,SAAtB,CAAnB;AAKH;;AACD,UAAMoG,YAAY,GAAG;AACjBJ,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,UAAU,EAAEC;AAAd,SAAD,CADM;AAEjBG,QAAAA,aAAa,EAAEX,uBAAuB,GAAG,aAAH,GAAmB;AAFxC,OAArB;AAIA,aAAQ,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAER,MAAM,CAACoB,IAA7B;AAAmC,QAAA,QAAQ,EAAE,MAAKvF,qBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACZ,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CACdlC,UAAU,KAAK,OAAf,GACMqG,MAAM,CAACqB,eADb,GAEMrB,MAAM,CAACsB,gBAHC,EAIdV,eAJc,EAKdP,qBALc,CAAtB;AAMO,QAAA,yBAAyB,EAAE,MAAK/G,WAAL,GAAmB,qBAAnB,GAA2C,KAN7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOG,OAAO,MAAKL,KAAL,CAAWsI,QAAlB,KAA+B,UAA/B,GACO,MAAKtI,KAAL,CAAWsI,QAAX,CAAoB,MAAK1G,SAAzB,CADP,GAEO,MAAK5B,KAAL,CAAWsI,QATrB,EAUG,MAAK7B,aAAL,EAVH,CADY,EAaZ,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,aAAa,EAAC,UAA7B;AAAwC,QAAA,GAAG,EAAE,MAAKxG,wBAAlD;AAA4E,QAAA,wBAAwB,EAAE,MAAKI,WAA3G;AAAwH,QAAA,KAAK,EAAE,CAAC0G,MAAM,CAACwB,eAAR,EAAyBN,YAAzB,EAAuCd,oBAAvC,CAA/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEO,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,MAAK1H,KAAL,CAAWwI,oBAAX,CAAgC,MAAK5G,SAArC,CADH,CADF,CAbY,CAAR;AAmBH,KA3DD;;AA4DA,UAAK6G,gBAAL,GAAwB,UAACC,GAAD,EAAS;AAG7B,YACKtI,iBADL,CACuBuE,OADvB,GACiC+D,GADjC;AAEA,YAAK1I,KAAL,CAAW2I,YAAX,0BAAK3I,KAAL,CAAW2I,YAAX,CAA0BD,GAA1B;AACH,KAND;;AAOA,QAAM9H,KAAK,GAAG,IAAIK,QAAQ,CAACE,KAAb,CAAmB,CAAnB,CAAd;AACA,QAAML,MAAM,GAAG,IAAIG,QAAQ,CAACE,KAAb,CAAmB,CAAnB,CAAf;AACA,QAAMJ,iBAAiB,GAAG,IAAIE,QAAQ,CAACE,KAAb,CAAmB,CAAnB,CAA1B;AACA,UAAKZ,KAAL,GAAa;AACTK,MAAAA,KAAK,EAALA,KADS;AAETE,MAAAA,MAAM,EAANA,MAFS;AAGTC,MAAAA,iBAAiB,EAAjBA,iBAHS;AAITC,MAAAA,cAAc,EAAE;AAJP,KAAb;;AAMA,UAAKV,mBAAL,CAAyBN,KAAzB,EAAgC,MAAKO,KAArC;;AAjTe;AAkTlB;;;;WACD,oCAA2BP,KAA3B,EAAkCO,KAAlC,EAAyC;AACrC,UAAI,KAAKP,KAAL,CAAWQ,cAAX,KAA8BR,KAAK,CAACQ,cAApC,IACA,KAAKR,KAAL,CAAWS,WAAX,KAA2BT,KAAK,CAACS,WADjC,IAEA,KAAKT,KAAL,CAAWU,UAAX,KAA0BV,KAAK,CAACU,UAFhC,IAGA,KAAKH,KAAL,CAAWS,cAAX,KAA8BT,KAAK,CAACS,cAHxC,EAGwD;AACpD,aAAKV,mBAAL,CAAyBN,KAAzB,EAAgCO,KAAhC;AACH;AACJ;;;WACD,kBAAS;AAAA,yBACoE,KAAKP,KADzE;AAAA,UACGQ,cADH,gBACGA,cADH;AAAA,UACmBwD,cADnB,gBACmBA,cADnB;AAAA,UACmCgB,SADnC,gBACmCA,SADnC;AAAA,UAC8CD,gBAD9C,gBAC8CA,gBAD9C;AAEL,UAAME,QAAQ,GAAGzE,cAAc,KAAK,MAApC;AAIA,UAAM0E,kBAAkB,GAAG,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,KAAK5E,WAAL,GAAmB,CAAC,CAApB,GAAwB,CAA/C,CAA3B;AAIA,UAAM8E,OAAO,GAAGF,QAAQ,GAClB;AAAEG,QAAAA,IAAI,EAAE,CAAR;AAAWrC,QAAAA,KAAK,EAAE,KAAK1C,WAAL,GAAmBgF,SAAnB,GAA+BL;AAAjD,OADkB,GAElB;AAAEM,QAAAA,KAAK,EAAE,CAAT;AAAYvC,QAAAA,KAAK,EAAE,KAAK1C,WAAL,GAAmBgF,SAAnB,GAA+BL;AAAlD,OAFN;AAGA,aAAQ,oBAAC,iBAAD;AAER,QAAA,GAAG,EAAE,KAAKyD,gBAFF;AAEoB,QAAA,OAAO,EAAEtD,OAF7B;AAEsC,QAAA,aAAa,EAAED,kBAAkB,GAAGH,gBAF1E;AAE4F,QAAA,WAAW,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN,CAFzG;AAEoH,QAAA,cAAc,EAAE,KAAKtC,cAFzI;AAEyJ,QAAA,oBAAoB,EAAE,KAAKW,yBAFpL;AAE+M,QAAA,8BAA8B,EAAE,KAAKpD,KAAL,CAAW4I,8BAF1P;AAE0R,QAAA,OAAO,EAAE5E,cAAc,KAAK,eAAnB,IAAsCA,cAAc,KAAK,aAF5V;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGP,KAAKiD,YAAL,EAHO,CAAR;AAKH;;;;EA9UqC3H,S;;SAArBS,Y;AAgVrBA,YAAY,CAAC8I,YAAb,GAA4B;AACxBpI,EAAAA,WAAW,EAAE,GADW;AAExBD,EAAAA,cAAc,EAAE,MAFQ;AAGxBwB,EAAAA,mBAAmB,EAAE,IAHG;AAIxBtB,EAAAA,UAAU,EAAE,OAJY;AAKxBsE,EAAAA,SAAS,EAAE,EALa;AAMxBD,EAAAA,gBAAgB,EAAE,CANM;AAOxB+B,EAAAA,YAAY,EAAE,oBAPU;AAQxB9C,EAAAA,cAAc,EAAE,UARQ;AASxB4E,EAAAA,8BAA8B,EAAE;AATR,CAA5B;AAWA7I,YAAY,CAAC+I,SAAb,GAAyB;AACrBC,EAAAA,IAAI,EAAE,MADe;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAzB;AAIA,IAAMjC,MAAM,GAAGkC,UAAU,CAACC,MAAX,CAAkB;AAC7BX,EAAAA,eAAe,kCACRU,UAAU,CAACE,kBADH;AAEXC,IAAAA,MAAM,EAAE,IAFG;AAGXlB,IAAAA,aAAa,EAAE;AAHJ,IADc;AAM7BG,EAAAA,gBAAgB,kCACTY,UAAU,CAACE,kBADF;AAEZC,IAAAA,MAAM,EAAE;AAFI,IANa;AAU7BhB,EAAAA,eAAe,oBACRa,UAAU,CAACE,kBADH,CAVc;AAa7BhB,EAAAA,IAAI,EAAE;AACFkB,IAAAA,IAAI,EAAE,CADJ;AAEFD,IAAAA,MAAM,EAAE,CAFN;AAGFE,IAAAA,QAAQ,EAAE;AAHR,GAbuB;AAkB7BtC,EAAAA,OAAO,kCACAiC,UAAU,CAACE,kBADX;AAEHC,IAAAA,MAAM,EAAE;AAFL;AAlBsB,CAAlB,CAAf","sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport { Animated, StyleSheet, View, Keyboard, StatusBar, I18nManager, } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler, } from '../handlers/gestureHandlers';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n    constructor(props) {\n        super(props);\n        this.accessibilityIsModalView = React.createRef();\n        this.pointerEventsView = React.createRef();\n        this.panGestureHandler = React.createRef();\n        this.drawerShown = false;\n        this.updateAnimatedEvent = (props, state) => {\n            // Event definition is based on\n            const { drawerPosition, drawerWidth, drawerType } = props;\n            const { dragX: dragXValue, touchX: touchXValue, drawerTranslation, containerWidth, } = state;\n            let dragX = dragXValue;\n            let touchX = touchXValue;\n            if (drawerPosition !== 'left') {\n                // Most of the code is written in a way to handle left-side drawer.\n                // In order to handle right-side drawer the only thing we need to\n                // do is to reverse events coming from gesture handler in a way they\n                // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n                // touchX is calulcated by subtracing real touchX from the width of the\n                // container (such that when touch happens at the right edge the value\n                // is simply 0)\n                dragX = Animated.multiply(new Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n                touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n                touchXValue.setValue(containerWidth);\n            }\n            else {\n                touchXValue.setValue(0);\n            }\n            // While closing the drawer when user starts gesture outside of its area (in greyed\n            // out part of the window), we want the drawer to follow only once finger reaches the\n            // edge of the drawer.\n            // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n            // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n            // an arrow pointing left\n            // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    +---------------+    +---------------+    +---------------+    +---------------+\n            //\n            // For the above to work properly we define animated value that will keep start position\n            // of the gesture. Then we use that value to calculate how much we need to subtract from\n            // the dragX. If the gesture started on the greyed out area we take the distance from the\n            // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n            // drawer be pulled back as soon as you start the pan.\n            //\n            // This is used only when drawerType is \"front\"\n            //\n            let translationX = dragX;\n            if (drawerType === 'front') {\n                const startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n                const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n                    inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n                    outputRange: [0, 0, 1],\n                });\n                translationX = Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n            }\n            this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n                inputRange: [0, drawerWidth],\n                outputRange: [0, 1],\n                extrapolate: 'clamp',\n            });\n            const gestureOptions = {\n                useNativeDriver: props.useNativeAnimations,\n            };\n            if (this.props.onDrawerSlide) {\n                gestureOptions.listener = (ev) => {\n                    const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n                    const position = translationX / this.state.containerWidth;\n                    this.props.onDrawerSlide?.(position);\n                };\n            }\n            this.onGestureEvent = Animated.event([{ nativeEvent: { translationX: dragXValue, x: touchXValue } }], gestureOptions);\n        };\n        this.handleContainerLayout = ({ nativeEvent }) => {\n            this.setState({ containerWidth: nativeEvent.layout.width });\n        };\n        this.emitStateChanged = (newState, drawerWillShow) => {\n            this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n        };\n        this.openingHandlerStateChange = ({ nativeEvent, }) => {\n            if (nativeEvent.oldState === State.ACTIVE) {\n                this.handleRelease({ nativeEvent });\n            }\n            else if (nativeEvent.state === State.ACTIVE) {\n                this.emitStateChanged(DRAGGING, false);\n                if (this.props.keyboardDismissMode === 'on-drag') {\n                    Keyboard.dismiss();\n                }\n                if (this.props.hideStatusBar) {\n                    StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n                }\n            }\n        };\n        this.onTapHandlerStateChange = ({ nativeEvent, }) => {\n            if (this.drawerShown &&\n                nativeEvent.oldState === State.ACTIVE &&\n                this.props.drawerLockMode !== 'locked-open') {\n                this.closeDrawer();\n            }\n        };\n        this.handleRelease = ({ nativeEvent, }) => {\n            const { drawerWidth, drawerPosition, drawerType } = this.props;\n            const { containerWidth } = this.state;\n            let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n            if (drawerPosition !== 'left') {\n                // See description in _updateAnimatedEvent about why events are flipped\n                // for right-side drawer\n                dragX = -dragX;\n                touchX = containerWidth - touchX;\n                velocityX = -velocityX;\n            }\n            const gestureStartX = touchX - dragX;\n            let dragOffsetBasedOnStart = 0;\n            if (drawerType === 'front') {\n                dragOffsetBasedOnStart =\n                    gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n            }\n            const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n            const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n            const shouldOpen = projOffsetX > drawerWidth / 2;\n            if (shouldOpen) {\n                this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n            }\n            else {\n                this.animateDrawer(startOffsetX, 0, velocityX);\n            }\n        };\n        this.updateShowing = (showing) => {\n            this.drawerShown = showing;\n            this.accessibilityIsModalView.current?.setNativeProps({\n                accessibilityViewIsModal: showing,\n            });\n            this.pointerEventsView.current?.setNativeProps({\n                pointerEvents: showing ? 'auto' : 'none',\n            });\n            const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n            const fromLeft = drawerPosition === 'left';\n            // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n            // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n            // orientation will be 1.\n            const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n            // When drawer is closed we want the hitSlop to be horizontally shorter\n            // than the container size by the value of SLOP. This will make it only\n            // activate when gesture happens not further than SLOP away from the edge\n            const hitSlop = fromLeft\n                ? { left: 0, width: showing ? undefined : edgeWidth }\n                : { right: 0, width: showing ? undefined : edgeWidth };\n            // @ts-ignore internal API, maybe could be fixed in handler types\n            this.panGestureHandler.current?.setNativeProps({\n                hitSlop,\n                activeOffsetX: gestureOrientation * minSwipeDistance,\n            });\n        };\n        this.animateDrawer = (fromValue, toValue, velocity, speed) => {\n            this.state.dragX.setValue(0);\n            this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n            if (fromValue != null) {\n                let nextFramePosition = fromValue;\n                if (this.props.useNativeAnimations) {\n                    // When using native driver, we predict the next position of the animation\n                    // because it takes one frame of a roundtrip to pass RELEASE event from\n                    // native driver to JS before we can start animating. Without it, it is more\n                    // noticable that the frame is dropped.\n                    if (fromValue < toValue && velocity > 0) {\n                        nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n                    }\n                    else if (fromValue > toValue && velocity < 0) {\n                        nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n                    }\n                }\n                this.state.drawerTranslation.setValue(nextFramePosition);\n            }\n            const willShow = toValue !== 0;\n            this.updateShowing(willShow);\n            this.emitStateChanged(SETTLING, willShow);\n            if (this.props.hideStatusBar) {\n                StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n            }\n            Animated.spring(this.state.drawerTranslation, {\n                velocity,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                speed: speed ?? undefined,\n            }).start(({ finished }) => {\n                if (finished) {\n                    this.emitStateChanged(IDLE, willShow);\n                    if (willShow) {\n                        this.props.onDrawerOpen?.();\n                    }\n                    else {\n                        this.props.onDrawerClose?.();\n                    }\n                }\n            });\n        };\n        this.openDrawer = (options = {}) => {\n            this.animateDrawer(\n            // TODO: decide if it should be null or undefined is the proper value\n            undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0);\n            // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n            this.forceUpdate();\n        };\n        this.closeDrawer = (options = {}) => {\n            // TODO: decide if it should be null or undefined is the proper value\n            this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n            // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n            this.forceUpdate();\n        };\n        this.renderOverlay = () => {\n            /* Overlay styles */\n            invariant(this.openValue, 'should be set');\n            const overlayOpacity = this.openValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, 1],\n                extrapolate: 'clamp',\n            });\n            const dynamicOverlayStyles = {\n                opacity: overlayOpacity,\n                backgroundColor: this.props.overlayColor,\n            };\n            return (<TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View pointerEvents={this.drawerShown ? 'auto' : 'none'} ref={this.pointerEventsView} style={[styles.overlay, dynamicOverlayStyles]}/>\n      </TapGestureHandler>);\n        };\n        this.renderDrawer = () => {\n            const { drawerBackgroundColor, drawerWidth, drawerPosition, drawerType, drawerContainerStyle, contentContainerStyle, } = this.props;\n            const fromLeft = drawerPosition === 'left';\n            const drawerSlide = drawerType !== 'back';\n            const containerSlide = drawerType !== 'front';\n            // we rely on row and row-reverse flex directions to position the drawer\n            // properly. Apparently for RTL these are flipped which requires us to use\n            // the opposite setting for the drawer to appear from left or right according\n            // to the drawerPosition prop\n            const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n            const dynamicDrawerStyles = {\n                backgroundColor: drawerBackgroundColor,\n                width: drawerWidth,\n            };\n            const openValue = this.openValue;\n            invariant(openValue, 'should be set');\n            let containerStyles;\n            if (containerSlide) {\n                const containerTranslateX = openValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n                    extrapolate: 'clamp',\n                });\n                containerStyles = {\n                    transform: [{ translateX: containerTranslateX }],\n                };\n            }\n            let drawerTranslateX = 0;\n            if (drawerSlide) {\n                const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n                drawerTranslateX = openValue.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [closedDrawerOffset, 0],\n                    extrapolate: 'clamp',\n                });\n            }\n            const drawerStyles = {\n                transform: [{ translateX: drawerTranslateX }],\n                flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n            };\n            return (<Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View style={[\n                drawerType === 'front'\n                    ? styles.containerOnBack\n                    : styles.containerInFront,\n                containerStyles,\n                contentContainerStyle,\n            ]} importantForAccessibility={this.drawerShown ? 'no-hide-descendants' : 'yes'}>\n          {typeof this.props.children === 'function'\n                ? this.props.children(this.openValue)\n                : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View pointerEvents=\"box-none\" ref={this.accessibilityIsModalView} accessibilityViewIsModal={this.drawerShown} style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>);\n        };\n        this.setPanGestureRef = (ref) => {\n            // TODO(TS): make sure it is OK\n            // taken from https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n            this\n                .panGestureHandler.current = ref;\n            this.props.onGestureRef?.(ref);\n        };\n        const dragX = new Animated.Value(0);\n        const touchX = new Animated.Value(0);\n        const drawerTranslation = new Animated.Value(0);\n        this.state = {\n            dragX,\n            touchX,\n            drawerTranslation,\n            containerWidth: 0,\n        };\n        this.updateAnimatedEvent(props, this.state);\n    }\n    UNSAFE_componentWillUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition ||\n            this.props.drawerWidth !== props.drawerWidth ||\n            this.props.drawerType !== props.drawerType ||\n            this.state.containerWidth !== state.containerWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n    }\n    render() {\n        const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance, } = this.props;\n        const fromLeft = drawerPosition === 'left';\n        // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n        // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n        // orientation will be 1.\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n        // When drawer is closed we want the hitSlop to be horizontally shorter\n        // than the container size by the value of SLOP. This will make it only\n        // activate when gesture happens not further than SLOP away from the edge\n        const hitSlop = fromLeft\n            ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n            : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n        return (<PanGestureHandler \n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef} hitSlop={hitSlop} activeOffsetX={gestureOrientation * minSwipeDistance} failOffsetY={[-15, 15]} onGestureEvent={this.onGestureEvent} onHandlerStateChange={this.openingHandlerStateChange} enableTrackpadTwoFingerGesture={this.props.enableTrackpadTwoFingerGesture} enabled={drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'}>\n        {this.renderDrawer()}\n      </PanGestureHandler>);\n    }\n}\nDrawerLayout.defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n};\nDrawerLayout.positions = {\n    Left: 'left',\n    Right: 'right',\n};\nconst styles = StyleSheet.create({\n    drawerContainer: {\n        ...StyleSheet.absoluteFillObject,\n        zIndex: 1001,\n        flexDirection: 'row',\n    },\n    containerInFront: {\n        ...StyleSheet.absoluteFillObject,\n        zIndex: 1002,\n    },\n    containerOnBack: {\n        ...StyleSheet.absoluteFillObject,\n    },\n    main: {\n        flex: 1,\n        zIndex: 0,\n        overflow: 'hidden',\n    },\n    overlay: {\n        ...StyleSheet.absoluteFillObject,\n        zIndex: 1000,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}