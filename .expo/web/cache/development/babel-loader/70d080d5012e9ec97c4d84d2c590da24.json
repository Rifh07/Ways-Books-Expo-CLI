{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from \"./DiscreteGestureHandler\";\nimport { isnan } from \"./utils\";\n\nvar TapGestureHandler = function (_DiscreteGestureHandl) {\n  _inherits(TapGestureHandler, _DiscreteGestureHandl);\n\n  var _super = _createSuper(TapGestureHandler);\n\n  function TapGestureHandler() {\n    var _this;\n\n    _classCallCheck(this, TapGestureHandler);\n\n    _this = _super.apply(this, arguments);\n    _this._shouldFireEndEvent = null;\n\n    _this.onSuccessfulTap = function (ev) {\n      if (_this._getPendingGestures().length) {\n        _this._shouldFireEndEvent = ev;\n        return;\n      }\n\n      if (ev.eventType === Hammer.INPUT_END) {\n        _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n          eventType: Hammer.INPUT_MOVE\n        }));\n      }\n\n      _this.sendEvent(_objectSpread(_objectSpread({}, ev), {}, {\n        isFinal: true\n      }));\n\n      _this.onGestureEnded(ev);\n    };\n\n    return _this;\n  }\n\n  _createClass(TapGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'tap';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Tap;\n    }\n  }, {\n    key: \"maxDelayMs\",\n    get: function get() {\n      return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(inputData) {\n      if (this.isGestureRunning) {\n        this.cancelEvent(inputData);\n      }\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      if (this.isGestureRunning) {\n        this.onSuccessfulTap(ev);\n      }\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(TapGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n\n      if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n        var gesture = this.hammer.get(this.name);\n\n        if (gesture.options.enable(gesture, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n\n      if (ev.isFinal && ev.maxPointers > 1) {\n        setTimeout(function () {\n          if (_this2.isGestureRunning) {\n            _this2.cancelEvent(ev);\n          }\n        });\n      }\n\n      if (this.hasGestureFailed) {\n        return;\n      }\n\n      if (ev.isFinal) {\n        if (ev.maxPointers > 1) {\n          setTimeout(function () {\n            if (_this2.isGestureRunning) {\n              _this2.cancelEvent(ev);\n            }\n          });\n        }\n\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n          _this2.hasGestureFailed = true;\n\n          _this2.cancelEvent(ev);\n        }, this.maxDelayMs);\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var _gesture2 = this.hammer.get(this.name);\n\n        if (_gesture2.options.enable(_gesture2, ev)) {\n          clearTimeout(this._multiTapTimer);\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(TapGestureHandler.prototype), \"getHammerConfig\", this).call(this)), {}, {\n        event: this.name,\n        taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n        interval: this.maxDelayMs,\n        time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n      });\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$shouldCancelWhen = _ref.shouldCancelWhenOutside,\n          shouldCancelWhenOutside = _ref$shouldCancelWhen === void 0 ? true : _ref$shouldCancelWhen,\n          _ref$maxDeltaX = _ref.maxDeltaX,\n          maxDeltaX = _ref$maxDeltaX === void 0 ? Number.NaN : _ref$maxDeltaX,\n          _ref$maxDeltaY = _ref.maxDeltaY,\n          maxDeltaY = _ref$maxDeltaY === void 0 ? Number.NaN : _ref$maxDeltaY,\n          _ref$numberOfTaps = _ref.numberOfTaps,\n          numberOfTaps = _ref$numberOfTaps === void 0 ? 1 : _ref$numberOfTaps,\n          _ref$minDurationMs = _ref.minDurationMs,\n          minDurationMs = _ref$minDurationMs === void 0 ? 525 : _ref$minDurationMs,\n          _ref$maxDelayMs = _ref.maxDelayMs,\n          maxDelayMs = _ref$maxDelayMs === void 0 ? Number.NaN : _ref$maxDelayMs,\n          _ref$maxDurationMs = _ref.maxDurationMs,\n          maxDurationMs = _ref$maxDurationMs === void 0 ? Number.NaN : _ref$maxDurationMs,\n          _ref$maxDist = _ref.maxDist,\n          maxDist = _ref$maxDist === void 0 ? 2 : _ref$maxDist,\n          _ref$minPointers = _ref.minPointers,\n          minPointers = _ref$minPointers === void 0 ? 1 : _ref$minPointers,\n          _ref$maxPointers = _ref.maxPointers,\n          maxPointers = _ref$maxPointers === void 0 ? 1 : _ref$maxPointers,\n          props = _objectWithoutProperties(_ref, [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"]);\n\n      return _get(_getPrototypeOf(TapGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        shouldCancelWhenOutside: shouldCancelWhenOutside,\n        numberOfTaps: numberOfTaps,\n        maxDeltaX: maxDeltaX,\n        maxDeltaY: maxDeltaY,\n        minDurationMs: minDurationMs,\n        maxDelayMs: maxDelayMs,\n        maxDist: maxDist,\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded() {\n      var _get2;\n\n      clearTimeout(this._timer);\n\n      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n        props[_key] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(TapGestureHandler.prototype), \"onGestureEnded\", this)).call.apply(_get2, [this].concat(props));\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {\n      if (this._shouldFireEndEvent) {\n        this.onSuccessfulTap(this._shouldFireEndEvent);\n        this._shouldFireEndEvent = null;\n      }\n    }\n  }]);\n\n  return TapGestureHandler;\n}(DiscreteGestureHandler);\n\nexport default TapGestureHandler;","map":{"version":3,"sources":["D:/Bootcamp/react native/finalProject/node_modules/react-native-gesture-handler/dist/src/web/TapGestureHandler.js"],"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","arguments","_shouldFireEndEvent","onSuccessfulTap","ev","_getPendingGestures","length","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","Tap","config","maxDelayMs","inputData","isGestureRunning","cancelEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","event","taps","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","_gesture"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AACA,OAAOC,sBAAP;AACA,SAASC,KAAT;;IACMC,iB;;;;;AACF,+BAAc;AAAA;;AAAA;;AACV,+BAASC,SAAT;AACA,UAAKC,mBAAL,GAA2B,IAA3B;;AACA,UAAKC,eAAL,GAAuB,UAACC,EAAD,EAAQ;AAC3B,UAAI,MAAKC,mBAAL,GAA2BC,MAA/B,EAAuC;AACnC,cAAKJ,mBAAL,GAA2BE,EAA3B;AACA;AACH;;AACD,UAAIA,EAAE,CAACG,SAAH,KAAiBV,MAAM,CAACW,SAA5B,EAAuC;AACnC,cAAKC,SAAL,iCAAoBL,EAApB;AAAwBG,UAAAA,SAAS,EAAEV,MAAM,CAACa;AAA1C;AACH;;AAED,YAAKD,SAAL,iCAAoBL,EAApB;AAAwBO,QAAAA,OAAO,EAAE;AAAjC;;AACA,YAAKC,cAAL,CAAoBR,EAApB;AACH,KAXD;;AAHU;AAeb;;;;SACD,eAAW;AACP,aAAO,KAAP;AACH;;;SACD,eAAyB;AACrB,aAAOP,MAAM,CAACgB,GAAd;AACH;;;SACD,eAAiB;AAEb,aAAOd,KAAK,CAAC,KAAKe,MAAL,CAAYC,UAAb,CAAL,GAAgC,GAAhC,GAAsC,KAAKD,MAAL,CAAYC,UAAzD;AACH;;;WACD,6BAAoBC,SAApB,EAA+B;AAC3B,UAAI,KAAKC,gBAAT,EAA2B;AACvB,aAAKC,WAAL,CAAiBF,SAAjB;AACH;AACJ;;;WACD,4BAAmBZ,EAAnB,EAAuB;AACnB,UAAI,KAAKa,gBAAT,EAA2B;AACvB,aAAKd,eAAL,CAAqBC,EAArB;AACH;AACJ;;;WACD,oBAAWA,EAAX,EAAe;AAAA;;AACX,wFAAiBA,EAAjB;;AAEA,UAAI,CAAC,KAAKe,gBAAN,IACA,CAAC,KAAKF,gBADN,IAGA,CAACb,EAAE,CAACO,OAHR,EAGiB;AAEb,YAAMS,OAAO,GAAG,KAAKC,MAAL,CAAYC,GAAZ,CAAgB,KAAKC,IAArB,CAAhB;;AAEA,YAAIH,OAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAuBL,OAAvB,EAAgChB,EAAhC,CAAJ,EAAyC;AACrCsB,UAAAA,YAAY,CAAC,KAAKC,cAAN,CAAZ;AACA,eAAKC,OAAL,CAAaxB,EAAb;AACA,eAAKK,SAAL,CAAeL,EAAf;AACH;AACJ;;AACD,UAAIA,EAAE,CAACO,OAAH,IAAcP,EAAE,CAACyB,WAAH,GAAiB,CAAnC,EAAsC;AAClCC,QAAAA,UAAU,CAAC,YAAM;AAGb,cAAI,MAAI,CAACb,gBAAT,EAA2B;AACvB,YAAA,MAAI,CAACC,WAAL,CAAiBd,EAAjB;AACH;AACJ,SANS,CAAV;AAOH;;AACD,UAAI,KAAKe,gBAAT,EAA2B;AACvB;AACH;;AAGD,UAAIf,EAAE,CAACO,OAAP,EAAgB;AAGZ,YAAIP,EAAE,CAACyB,WAAH,GAAiB,CAArB,EAAwB;AACpBC,UAAAA,UAAU,CAAC,YAAM;AACb,gBAAI,MAAI,CAACb,gBAAT,EAA2B;AACvB,cAAA,MAAI,CAACC,WAAL,CAAiBd,EAAjB;AACH;AACJ,WAJS,CAAV;AAKH;;AAEDsB,QAAAA,YAAY,CAAC,KAAKK,MAAN,CAAZ;AAEA,aAAKA,MAAL,GAAcD,UAAU,CAAC,YAAM;AAC3B,UAAA,MAAI,CAACX,gBAAL,GAAwB,IAAxB;;AACA,UAAA,MAAI,CAACD,WAAL,CAAiBd,EAAjB;AACH,SAHuB,EAGrB,KAAKW,UAHgB,CAAxB;AAIH,OAjBD,MAkBK,IAAI,CAAC,KAAKI,gBAAN,IAA0B,CAAC,KAAKF,gBAApC,EAAsD;AAEvD,YAAMG,SAAO,GAAG,KAAKC,MAAL,CAAYC,GAAZ,CAAgB,KAAKC,IAArB,CAAhB;;AAEA,YAAIH,SAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAuBL,SAAvB,EAAgChB,EAAhC,CAAJ,EAAyC;AACrCsB,UAAAA,YAAY,CAAC,KAAKC,cAAN,CAAZ;AACA,eAAKC,OAAL,CAAaxB,EAAb;AACA,eAAKK,SAAL,CAAeL,EAAf;AACH;AACJ;AACJ;;;WACD,2BAAkB;AACd;AAEI4B,QAAAA,KAAK,EAAE,KAAKT,IAFhB;AAIIU,QAAAA,IAAI,EAAElC,KAAK,CAAC,KAAKe,MAAL,CAAYoB,YAAb,CAAL,GAAkC,CAAlC,GAAsC,KAAKpB,MAAL,CAAYoB,YAJ5D;AAKIC,QAAAA,QAAQ,EAAE,KAAKpB,UALnB;AAMIqB,QAAAA,IAAI,EAEJrC,KAAK,CAAC,KAAKe,MAAL,CAAYuB,aAAb,CAAL,IAAoC,KAAKvB,MAAL,CAAYuB,aAAZ,IAA6B,IAAjE,GACM,GADN,GAGQ,KAAKvB,MAAL,CAAYuB;AAXxB;AAaH;;;WACD,mCAEuF;AAAA,uCAFjEC,uBAEiE;AAAA,UAFjEA,uBAEiE,sCAFvC,IAEuC;AAAA,gCAFjCC,SAEiC;AAAA,UAFjCA,SAEiC,+BAFrBC,MAAM,CAACC,GAEc;AAAA,gCAFTC,SAES;AAAA,UAFTA,SAES,+BAFGF,MAAM,CAACC,GAEV;AAAA,mCAFeP,YAEf;AAAA,UAFeA,YAEf,kCAF8B,CAE9B;AAAA,oCAFiCS,aAEjC;AAAA,UAFiCA,aAEjC,mCAFiD,GAEjD;AAAA,iCAFsD5B,UAEtD;AAAA,UAFsDA,UAEtD,gCAFmEyB,MAAM,CAACC,GAE1E;AAAA,oCAAvFJ,aAAuF;AAAA,UAAvFA,aAAuF,mCAAvEG,MAAM,CAACC,GAAgE;AAAA,8BAA3DG,OAA2D;AAAA,UAA3DA,OAA2D,6BAAjD,CAAiD;AAAA,kCAA9CC,WAA8C;AAAA,UAA9CA,WAA8C,iCAAhC,CAAgC;AAAA,kCAA7BhB,WAA6B;AAAA,UAA7BA,WAA6B,iCAAf,CAAe;AAAA,UAATiB,KAAS;;AACnF;AACIR,QAAAA,uBAAuB,EAAvBA,uBADJ;AAEIJ,QAAAA,YAAY,EAAZA,YAFJ;AAGIK,QAAAA,SAAS,EAATA,SAHJ;AAIIG,QAAAA,SAAS,EAATA,SAJJ;AAKIC,QAAAA,aAAa,EAAbA,aALJ;AAMI5B,QAAAA,UAAU,EAAVA,UANJ;AAOI6B,QAAAA,OAAO,EAAPA,OAPJ;AAQIC,QAAAA,WAAW,EAAXA,WARJ;AASIhB,QAAAA,WAAW,EAAXA;AATJ,SAUOiB,KAVP;AAYH;;;WACD,0BAAyB;AAAA;;AACrBpB,MAAAA,YAAY,CAAC,KAAKK,MAAN,CAAZ;;AADqB,wCAAPe,KAAO;AAAPA,QAAAA,KAAO;AAAA;;AAGrB,2HAAwBA,KAAxB;AACH;;;WACD,wBAAeC,QAAf,EAAyB;AACrB,UAAI,KAAK7C,mBAAT,EAA8B;AAC1B,aAAKC,eAAL,CAAqB,KAAKD,mBAA1B;AACA,aAAKA,mBAAL,GAA2B,IAA3B;AACH;AACJ;;;;EAzI2BJ,sB;;AA2IhC,eAAeE,iBAAf","sourcesContent":["import Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\nclass TapGestureHandler extends DiscreteGestureHandler {\n    constructor() {\n        super(...arguments);\n        this._shouldFireEndEvent = null;\n        this.onSuccessfulTap = (ev) => {\n            if (this._getPendingGestures().length) {\n                this._shouldFireEndEvent = ev;\n                return;\n            }\n            if (ev.eventType === Hammer.INPUT_END) {\n                this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n            }\n            // When handler gets activated it will turn into State.END immediately.\n            this.sendEvent({ ...ev, isFinal: true });\n            this.onGestureEnded(ev);\n        };\n    }\n    get name() {\n        return 'tap';\n    }\n    get NativeGestureClass() {\n        return Hammer.Tap;\n    }\n    get maxDelayMs() {\n        // @ts-ignore TODO(TS) trace down config\n        return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n    simulateCancelEvent(inputData) {\n        if (this.isGestureRunning) {\n            this.cancelEvent(inputData);\n        }\n    }\n    onGestureActivated(ev) {\n        if (this.isGestureRunning) {\n            this.onSuccessfulTap(ev);\n        }\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n        if (!this.hasGestureFailed &&\n            !this.isGestureRunning &&\n            // Prevent multi-pointer events from misfiring.\n            !ev.isFinal) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name);\n            // @ts-ignore TODO(TS) trace down config\n            if (gesture.options.enable(gesture, ev)) {\n                clearTimeout(this._multiTapTimer);\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n        if (ev.isFinal && ev.maxPointers > 1) {\n            setTimeout(() => {\n                // Handle case where one finger presses slightly\n                // after the first finger on a multi-tap event\n                if (this.isGestureRunning) {\n                    this.cancelEvent(ev);\n                }\n            });\n        }\n        if (this.hasGestureFailed) {\n            return;\n        }\n        // Hammer doesn't send a `cancel` event for taps.\n        // Manually fail the event.\n        if (ev.isFinal) {\n            // Handle case where one finger presses slightly\n            // after the first finger on a multi-tap event\n            if (ev.maxPointers > 1) {\n                setTimeout(() => {\n                    if (this.isGestureRunning) {\n                        this.cancelEvent(ev);\n                    }\n                });\n            }\n            // Clear last timer\n            clearTimeout(this._timer);\n            // Create time out for multi-taps.\n            this._timer = setTimeout(() => {\n                this.hasGestureFailed = true;\n                this.cancelEvent(ev);\n            }, this.maxDelayMs);\n        }\n        else if (!this.hasGestureFailed && !this.isGestureRunning) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name);\n            // @ts-ignore TODO(TS) trace down config\n            if (gesture.options.enable(gesture, ev)) {\n                clearTimeout(this._multiTapTimer);\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            event: this.name,\n            // @ts-ignore TODO(TS) trace down config\n            taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n            interval: this.maxDelayMs,\n            time: \n            // @ts-ignore TODO(TS) trace down config\n            isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n                ? 250\n                : // @ts-ignore TODO(TS) trace down config\n                    this.config.maxDurationMs,\n        };\n    }\n    updateGestureConfig({ shouldCancelWhenOutside = true, maxDeltaX = Number.NaN, maxDeltaY = Number.NaN, numberOfTaps = 1, minDurationMs = 525, maxDelayMs = Number.NaN, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN, maxDist = 2, minPointers = 1, maxPointers = 1, ...props }) {\n        return super.updateGestureConfig({\n            shouldCancelWhenOutside,\n            numberOfTaps,\n            maxDeltaX,\n            maxDeltaY,\n            minDurationMs,\n            maxDelayMs,\n            maxDist,\n            minPointers,\n            maxPointers,\n            ...props,\n        });\n    }\n    onGestureEnded(...props) {\n        clearTimeout(this._timer);\n        // @ts-ignore TODO(TS) check how onGestureEnded works\n        super.onGestureEnded(...props);\n    }\n    onWaitingEnded(_gesture) {\n        if (this._shouldFireEndEvent) {\n            this.onSuccessfulTap(this._shouldFireEndEvent);\n            this._shouldFireEndEvent = null;\n        }\n    }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}