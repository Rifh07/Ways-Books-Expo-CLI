{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nvar _jsxFileName = \"D:\\\\Bootcamp\\\\react native\\\\finalProject\\\\node_modules\\\\react-native-gesture-handler\\\\dist\\\\src\\\\handlers\\\\createNativeWrapper.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\nimport { NativeViewGestureHandler, nativeViewProps } from \"./NativeViewGestureHandler\";\nvar NATIVE_WRAPPER_PROPS_FILTER = [].concat(_toConsumableArray(nativeViewProps), ['onGestureHandlerEvent', 'onGestureHandlerStateChange']);\nexport default function createNativeWrapper(Component) {\n  var _this = this;\n\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var ComponentWrapper = React.forwardRef(function (props, ref) {\n    var gestureHandlerProps = Object.keys(props).reduce(function (res, key) {\n      var allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n\n      if (allowedKeys.includes(key)) {\n        res[key] = props[key];\n      }\n\n      return res;\n    }, _objectSpread({}, config));\n\n    var _ref = useRef();\n\n    var _gestureHandlerRef = useRef();\n\n    useImperativeHandle(ref, function () {\n      var node = _gestureHandlerRef.current;\n\n      if (_ref.current && node) {\n        _ref.current.handlerTag = node.handlerTag;\n        return _ref.current;\n      }\n\n      return null;\n    }, [_ref, _gestureHandlerRef]);\n    return React.createElement(NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n      ref: _gestureHandlerRef,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }), React.createElement(Component, _extends({}, props, {\n      ref: _ref,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    })));\n  });\n  ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"sources":["D:/Bootcamp/react native/finalProject/node_modules/react-native-gesture-handler/dist/src/handlers/createNativeWrapper.js"],"names":["React","useImperativeHandle","useRef","NativeViewGestureHandler","nativeViewProps","NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","ComponentWrapper","forwardRef","props","ref","gestureHandlerProps","Object","keys","reduce","res","key","allowedKeys","includes","_ref","_gestureHandlerRef","node","current","handlerTag","displayName"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,wBAAT,EAAmCC,eAAnC;AAQA,IAAMC,2BAA2B,gCAC1BD,eAD0B,IAE7B,uBAF6B,EAG7B,6BAH6B,EAAjC;AAKA,eAAe,SAASE,mBAAT,CAA6BC,SAA7B,EAAqD;AAAA;;AAAA,MAAbC,MAAa,uEAAJ,EAAI;AAChE,MAAMC,gBAAgB,GAAGT,KAAK,CAACU,UAAN,CAAiB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AAEtD,QAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,MAAnB,CAA0B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAEhE,UAAMC,WAAW,GAAGd,2BAApB;;AACA,UAAIc,WAAW,CAACC,QAAZ,CAAqBF,GAArB,CAAJ,EAA+B;AAE3BD,QAAAA,GAAG,CAACC,GAAD,CAAH,GAAWP,KAAK,CAACO,GAAD,CAAhB;AACH;;AACD,aAAOD,GAAP;AACH,KAR2B,oBAQpBT,MARoB,EAA5B;;AAUA,QAAMa,IAAI,GAAGnB,MAAM,EAAnB;;AACA,QAAMoB,kBAAkB,GAAGpB,MAAM,EAAjC;;AACAD,IAAAA,mBAAmB,CAACW,GAAD,EAEnB,YAAM;AACF,UAAMW,IAAI,GAAGD,kBAAkB,CAACE,OAAhC;;AAEA,UAAIH,IAAI,CAACG,OAAL,IAAgBD,IAApB,EAA0B;AAEtBF,QAAAA,IAAI,CAACG,OAAL,CAAaC,UAAb,GAA0BF,IAAI,CAACE,UAA/B;AACA,eAAOJ,IAAI,CAACG,OAAZ;AACH;;AACD,aAAO,IAAP;AACH,KAXkB,EAWhB,CAACH,IAAD,EAAOC,kBAAP,CAXgB,CAAnB;AAYA,WAAQ,oBAAC,wBAAD,eAA8BT,mBAA9B;AAER,MAAA,GAAG,EAAES,kBAFG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAGR,oBAAC,SAAD,eAAeX,KAAf;AAAsB,MAAA,GAAG,EAAEU,IAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHQ,CAAR;AAKH,GA/BwB,CAAzB;AAgCAZ,EAAAA,gBAAgB,CAACiB,WAAjB,GAA+BnB,SAAS,CAACmB,WAAV,IAAyB,kBAAxD;AACA,SAAOjB,gBAAP;AACH","sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\nimport { NativeViewGestureHandler, nativeViewProps, } from './NativeViewGestureHandler';\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n    ...nativeViewProps,\n    'onGestureHandlerEvent',\n    'onGestureHandlerStateChange',\n];\nexport default function createNativeWrapper(Component, config = {}) {\n    const ComponentWrapper = React.forwardRef((props, ref) => {\n        // filter out props that should be passed to gesture handler wrapper\n        const gestureHandlerProps = Object.keys(props).reduce((res, key) => {\n            // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n            const allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n            if (allowedKeys.includes(key)) {\n                // @ts-ignore FIXME(TS)\n                res[key] = props[key];\n            }\n            return res;\n        }, { ...config } // watch out not to modify config\n        );\n        const _ref = useRef();\n        const _gestureHandlerRef = useRef();\n        useImperativeHandle(ref, \n        // @ts-ignore TODO(TS) decide how nulls work in this context\n        () => {\n            const node = _gestureHandlerRef.current;\n            // add handlerTag for relations config\n            if (_ref.current && node) {\n                // @ts-ignore FIXME(TS) think about createHandler return type\n                _ref.current.handlerTag = node.handlerTag;\n                return _ref.current;\n            }\n            return null;\n        }, [_ref, _gestureHandlerRef]);\n        return (<NativeViewGestureHandler {...gestureHandlerProps} \n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref}/>\n      </NativeViewGestureHandler>);\n    });\n    ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';\n    return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"module"}