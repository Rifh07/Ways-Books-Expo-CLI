{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"D:\\\\Bootcamp\\\\react native\\\\finalProject\\\\node_modules\\\\react-native-gesture-handler\\\\dist\\\\src\\\\components\\\\Swipeable.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler } from \"../handlers/gestureHandlers\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\n\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n\n  var _super = _createSuper(Swipeable);\n\n  function Swipeable(props) {\n    var _this;\n\n    _classCallCheck(this, Swipeable);\n\n    _this = _super.call(this, props);\n\n    _this.updateAnimatedEvent = function (props, state) {\n      var friction = props.friction,\n          overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n          rowTranslation = state.rowTranslation,\n          _state$leftWidth = state.leftWidth,\n          leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n          _state$rowWidth = state.rowWidth,\n          rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n          rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n          overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n          _props$overshootRight = props.overshootRight,\n          overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n\n    _this.onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    };\n\n    _this.onHandlerStateChange = function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    };\n\n    _this.handleRelease = function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n          velocityX = _ev$nativeEvent.velocityX,\n          dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n          _this$state$leftWidth = _this$state.leftWidth,\n          leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n          _this$state$rowWidth = _this$state.rowWidth,\n          rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n          rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n          friction = _this$props.friction,\n          _this$props$leftThres = _this$props.leftThreshold,\n          leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n          _this$props$rightThre = _this$props.rightThreshold,\n          rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n\n    _this.animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n          dragX = _this$state2.dragX,\n          rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            _this.props.onSwipeableClose == null ? void 0 : _this.props.onSwipeableClose();\n          } else {\n            _this.props.onSwipeableOpen == null ? void 0 : _this.props.onSwipeableOpen();\n          }\n        }\n      });\n\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        _this.props.onSwipeableWillClose == null ? void 0 : _this.props.onSwipeableWillClose();\n      } else {\n        _this.props.onSwipeableWillOpen == null ? void 0 : _this.props.onSwipeableWillOpen();\n      }\n    };\n\n    _this.onRowLayout = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    };\n\n    _this.currentOffset = function () {\n      var _this$state3 = _this.state,\n          _this$state3$leftWidt = _this$state3.leftWidth,\n          leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n          _this$state3$rowWidth = _this$state3.rowWidth,\n          rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n          rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    };\n\n    _this.close = function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    };\n\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n          leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    };\n\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n          rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n          rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    };\n\n    var dragX = new Animated.Value(0);\n    _this.state = {\n      dragX: dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n\n    _this.updateAnimatedEvent(props, _this.state);\n\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations\n    });\n    return _this;\n  }\n\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var rowState = this.state.rowState;\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          renderLeftActions = _this$props2.renderLeftActions,\n          renderRightActions = _this$props2.renderRightActions;\n      var left = renderLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 44\n        }\n      }, renderLeftActions(this.showLeftAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref4) {\n          var nativeEvent = _ref4.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 9\n        }\n      }));\n      var right = renderRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 46\n        }\n      }, renderRightActions(this.showRightAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }));\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }\n      }), React.createElement(Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }\n      }, left, right, React.createElement(TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this.onTapHandlerStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this.transX\n          }]\n        }, this.props.childrenContainerStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      }, children))));\n    }\n  }]);\n\n  return Swipeable;\n}(Component);\n\nexport { Swipeable as default };\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"sources":["D:/Bootcamp/react native/finalProject/node_modules/react-native-gesture-handler/dist/src/components/Swipeable.js"],"names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","props","updateAnimatedEvent","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","onTapHandlerStateChange","nativeEvent","oldState","ACTIVE","close","onHandlerStateChange","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","onRowLayout","layout","width","openLeft","openRight","undefined","onGestureEvent","event","children","renderLeftActions","renderRightActions","left","styles","leftActions","transform","translateX","x","right","rightActions","container","containerStyle","childrenContainerStyle","defaultProps","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager, } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler, } from '../handlers/gestureHandlers';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nexport default class Swipeable extends Component {\n    constructor(props) {\n        super(props);\n        this.updateAnimatedEvent = (props, state) => {\n            const { friction, overshootFriction } = props;\n            const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n            const { rightOffset = rowWidth } = state;\n            const rightWidth = Math.max(0, rowWidth - rightOffset);\n            const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0, } = props;\n            const transX = Animated.add(rowTranslation, dragX.interpolate({\n                inputRange: [0, friction],\n                outputRange: [0, 1],\n            })).interpolate({\n                inputRange: [\n                    -rightWidth - (overshootRight ? 1 : overshootFriction),\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + (overshootLeft ? 1 : overshootFriction),\n                ],\n                outputRange: [\n                    -rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0),\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0),\n                ],\n            });\n            this.transX = transX;\n            this.showLeftAction =\n                leftWidth > 0\n                    ? transX.interpolate({\n                        inputRange: [-1, 0, leftWidth],\n                        outputRange: [0, 0, 1],\n                    })\n                    : new Animated.Value(0);\n            this.leftActionTranslate = this.showLeftAction.interpolate({\n                inputRange: [0, Number.MIN_VALUE],\n                outputRange: [-10000, 0],\n                extrapolate: 'clamp',\n            });\n            this.showRightAction =\n                rightWidth > 0\n                    ? transX.interpolate({\n                        inputRange: [-rightWidth, 0, 1],\n                        outputRange: [1, 0, 0],\n                    })\n                    : new Animated.Value(0);\n            this.rightActionTranslate = this.showRightAction.interpolate({\n                inputRange: [0, Number.MIN_VALUE],\n                outputRange: [-10000, 0],\n                extrapolate: 'clamp',\n            });\n        };\n        this.onTapHandlerStateChange = ({ nativeEvent, }) => {\n            if (nativeEvent.oldState === State.ACTIVE) {\n                this.close();\n            }\n        };\n        this.onHandlerStateChange = (ev) => {\n            if (ev.nativeEvent.oldState === State.ACTIVE) {\n                this.handleRelease(ev);\n            }\n        };\n        this.handleRelease = (ev) => {\n            const { velocityX, translationX: dragX } = ev.nativeEvent;\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            const { friction, leftThreshold = leftWidth / 2, rightThreshold = rightWidth / 2, } = this.props;\n            const startOffsetX = this.currentOffset() + dragX / friction;\n            const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n            let toValue = 0;\n            if (rowState === 0) {\n                if (translationX > leftThreshold) {\n                    toValue = leftWidth;\n                }\n                else if (translationX < -rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            }\n            else if (rowState === 1) {\n                // swiped to left\n                if (translationX > -leftThreshold) {\n                    toValue = leftWidth;\n                }\n            }\n            else {\n                // swiped to right\n                if (translationX < rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            }\n            this.animateRow(startOffsetX, toValue, velocityX / friction);\n        };\n        this.animateRow = (fromValue, toValue, velocityX) => {\n            const { dragX, rowTranslation } = this.state;\n            dragX.setValue(0);\n            rowTranslation.setValue(fromValue);\n            this.setState({ rowState: Math.sign(toValue) });\n            Animated.spring(rowTranslation, {\n                restSpeedThreshold: 1.7,\n                restDisplacementThreshold: 0.4,\n                velocity: velocityX,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                ...this.props.animationOptions,\n            }).start(({ finished }) => {\n                if (finished) {\n                    if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n                        this.props.onSwipeableLeftOpen();\n                    }\n                    else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n                        this.props.onSwipeableRightOpen();\n                    }\n                    if (toValue === 0) {\n                        this.props.onSwipeableClose?.();\n                    }\n                    else {\n                        this.props.onSwipeableOpen?.();\n                    }\n                }\n            });\n            if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n                this.props.onSwipeableLeftWillOpen();\n            }\n            else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n                this.props.onSwipeableRightWillOpen();\n            }\n            if (toValue === 0) {\n                this.props.onSwipeableWillClose?.();\n            }\n            else {\n                this.props.onSwipeableWillOpen?.();\n            }\n        };\n        this.onRowLayout = ({ nativeEvent }) => {\n            this.setState({ rowWidth: nativeEvent.layout.width });\n        };\n        this.currentOffset = () => {\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            if (rowState === 1) {\n                return leftWidth;\n            }\n            else if (rowState === -1) {\n                return -rightWidth;\n            }\n            return 0;\n        };\n        this.close = () => {\n            this.animateRow(this.currentOffset(), 0);\n        };\n        this.openLeft = () => {\n            const { leftWidth = 0 } = this.state;\n            this.animateRow(this.currentOffset(), leftWidth);\n        };\n        this.openRight = () => {\n            const { rowWidth = 0 } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            this.animateRow(this.currentOffset(), -rightWidth);\n        };\n        const dragX = new Animated.Value(0);\n        this.state = {\n            dragX,\n            rowTranslation: new Animated.Value(0),\n            rowState: 0,\n            leftWidth: undefined,\n            rightOffset: undefined,\n            rowWidth: undefined,\n        };\n        this.updateAnimatedEvent(props, this.state);\n        this.onGestureEvent = Animated.event([{ nativeEvent: { translationX: dragX } }], { useNativeDriver: props.useNativeAnimations });\n    }\n    UNSAFE_componentWillUpdate(props, state) {\n        if (this.props.friction !== props.friction ||\n            this.props.overshootLeft !== props.overshootLeft ||\n            this.props.overshootRight !== props.overshootRight ||\n            this.props.overshootFriction !== props.overshootFriction ||\n            this.state.leftWidth !== state.leftWidth ||\n            this.state.rightOffset !== state.rightOffset ||\n            this.state.rowWidth !== state.rowWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n    }\n    render() {\n        const { rowState } = this.state;\n        const { children, renderLeftActions, renderRightActions } = this.props;\n        const left = renderLeftActions && (<Animated.View style={[\n            styles.leftActions,\n            // all those and below parameters can have ! since they are all asigned in constructor in `updateAnimatedEvent` but TS cannot spot it for some reason\n            { transform: [{ translateX: this.leftActionTranslate }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction, this.transX)}\n        <View onLayout={({ nativeEvent }) => this.setState({ leftWidth: nativeEvent.layout.x })}/>\n      </Animated.View>);\n        const right = renderRightActions && (<Animated.View style={[\n            styles.rightActions,\n            { transform: [{ translateX: this.rightActionTranslate }] },\n        ]}>\n        {renderRightActions(this.showRightAction, this.transX)}\n        <View onLayout={({ nativeEvent }) => this.setState({ rightOffset: nativeEvent.layout.x })}/>\n      </Animated.View>);\n        return (<PanGestureHandler activeOffsetX={[-10, 10]} {...this.props} onGestureEvent={this.onGestureEvent} onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View onLayout={this.onRowLayout} style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler enabled={rowState !== 0} onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View pointerEvents={rowState === 0 ? 'auto' : 'box-only'} style={[\n            {\n                transform: [{ translateX: this.transX }],\n            },\n            this.props.childrenContainerStyle,\n        ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>);\n    }\n}\nSwipeable.defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n};\nconst styles = StyleSheet.create({\n    container: {\n        overflow: 'hidden',\n    },\n    leftActions: {\n        ...StyleSheet.absoluteFillObject,\n        flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n    },\n    rightActions: {\n        ...StyleSheet.absoluteFillObject,\n        flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n    },\n});\n"]},"metadata":{},"sourceType":"module"}